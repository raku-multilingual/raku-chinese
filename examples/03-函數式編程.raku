#!/usr/bin/env raku
use lib 'lib';
use Chinese;

說 "=== 函數式編程示例 ===\n";

# 基本數據
my @數字 = 1..20;
說 "數字：", @數字;
說 "";

# 映射 - 轉換每個元素
說 "=== 映射（轉換）===";
my @平方 = 映射(-> $n { $n 乘 $n }, @數字);
說 "平方：", @平方[^10], " ...";

my @雙倍 = 映射(-> $n { $n 乘 2 }, @數字);
說 "雙倍：", @雙倍[^10], " ...";
說 "";

# 過濾 - 選擇元素
說 "=== 過濾 ===";
my @偶數 = 過濾(-> $n { 是偶數($n) }, @數字);
說 "偶數：", @偶數;

my @大數 = 過濾(-> $n { ($n 大於 10) }, @數字);
說 "大於10的數：", @大數;

my @質數 = 過濾(-> $n { 是質數($n) }, @數字);
說 "質數：", @質數;
說 "";

# 歸約 - 組合元素
說 "=== 歸約 ===";
my $總和 = 歸約(-> $a, $b { $a 加 $b }, @數字);
說 "總和（1到20）：", $總和;

my $乘積5 = 歸約(-> $a, $b { $a 乘 $b }, 1..5);
說 "5的階乘：", $乘積5;

my $最大值 = 歸約(-> $a, $b { ($a 大於 $b) ?? $a !! $b }, @數字);
說 "最大值：", $最大值;
說 "";

# 全部/任何/沒有 檢查
說 "=== 條件檢查 ===";
說 "全部 > 0？", 全部(-> $n { ($n 大於 0) }, @數字);
說 "全部是偶數？", 全部(-> $n { 是偶數($n) }, @數字);
說 "任何 > 15？", 任何(-> $n { ($n 大於 15) }, @數字);
說 "沒有 < 0？", 沒有(-> $n { ($n 小於 0) }, @數字);
說 "恰好一個 == 10？", 恰好一個(-> $n { ($n 等於 10) }, @數字);
說 "";

# 函數組合
說 "=== 函數組合 ===";
# 雙倍偶數然後加1
my @結果1 = 映射(-> $n { $n 加 1 }, 
              過濾(-> $n { 是偶數($n) }, 
              映射(-> $n { $n 乘 2 }, @數字[^10])));
說 "雙倍、過濾偶數、+1：", @結果1;

# 管道方式
my @步驟1 = 映射(-> $n { $n 乘 2 }, @數字[^10]);
my @步驟2 = 過濾(-> $n { 是偶數($n) }, @步驟1);
my @步驟3 = 映射(-> $n { $n 加 1 }, @步驟2);
說 "相同結果（管道）：", @步驟3;
說 "";

# 組合列表
說 "=== 組合列表 ===";
my @字母 = 'a'..'j';
my @配對結果 = 配對(@數字[^10], @字母);
說 "數字與字母配對：";
對於(@配對結果[^5], -> ($數, $字) {
    說 "  $數 -> $字";
});
說 "  ...";
說 "";

# 分區和分組
說 "=== 分區和分組 ===";
my %奇偶 = 分組(-> $n { 是偶數($n) ?? '偶數' !! '奇數' }, @數字);
說 "偶數：", %奇偶<偶數>;
說 "奇數：", %奇偶<奇數>;

my %餘數3 = 分組(-> $n { $n 餘 3 }, @數字[^12]);
說 "\n按餘數3分組：";
對於(%餘數3.keys.sort, -> $鍵 {
    說 "  餘數 $鍵：", %餘數3{$鍵};
});
說 "";

# 惰性求值
說 "=== 惰性求值 ===";
my @斐波那契 = 1, 1, * 加 * ... *;
說 "前15個斐波那契數：", @斐波那契[^15];

my @冪2 = 1, 2, 4, 8, * 乘 2 ... *;
說 "前10個2的冪：", @冪2[^10];
說 "";

# 高階函數
說 "=== 高階函數 ===";
# 創建一個加n的函數
my &加n = -> $n { -> $x { $x 加 $n } };
my &加5 = 加n(5);
說 "對[1,2,3]加5：", 映射(&加5, [1,2,3]);

# 組合函數
my &雙倍 = -> $x { $x 乘 2 };
my &遞增 = -> $x { $x 加 1 };
my &雙倍後遞增 = 組合函數(&遞增, &雙倍);
說 "雙倍後遞增10：", 雙倍後遞增(10);

# 柯里化
my &乘法 = -> $x, $y { $x 乘 $y };
my &乘3 = 柯里化(&乘法, 3);
說 "乘以3：", 映射(&乘3, [1,2,3,4,5]);
說 "";

# 實際應用：數據分析
說 "=== 應用：成績分析 ===";
my @成績 = [85, 92, 78, 95, 88, 73, 91, 87, 94, 82];
說 "成績：", @成績;

my $平均分 = 平均(@成績);
說 "平均分：", 四捨五入($平均分);

my @高於平均 = 過濾(-> $s { ($s 大於 $平均分) }, @成績);
說 "高於平均分的：", @高於平均;

my @等級 = 映射(-> $s { 
    ($s 大於等於 90) ?? 'A' !!
    ($s 大於等於 80) ?? 'B' !!
    ($s 大於等於 70) ?? 'C' !! 'D'
}, @成績);
說 "等級：", @等級;

my %等級分布 = 分組(-> $g { $g }, @等級);
說 "等級分布：";
對於(%等級分布.keys.sort, -> $等級 {
    說 "  $等級：", 計數(%等級分布{$等級}), " 名學生";
});